from confluent_kafka import Consumer

conf = {
    'bootstrap.servers': 'kafka1:9092,kafka2:9092,kafka3:9092',
    
    # Security (SASL_SSL with SCRAM)
    'security.protocol': 'SASL_SSL',
    'sasl.mechanisms': 'SCRAM-SHA-512',
    'sasl.username': 'your_username',
    'sasl.password': 'your_password',
    
    # TLS settings (optional, if using custom CA)
    'ssl.ca.location': '/path/to/ca.pem',
    # 'ssl.certificate.location': '/path/to/cert.pem',
    # 'ssl.key.location': '/path/to/key.pem',
    # 'ssl.key.password': 'your_ssl_key_password',
    
    # Consumer group settings
    'group.id': 'my-python-consumer-group',
    'auto.offset.reset': 'earliest',      # Start from earliest if no committed offset
    'enable.auto.commit': False,           # Manual commit for more control
    
    # Polling and resource tuning
    'max.poll.interval.ms': 300000,        # Max time between poll calls
    'session.timeout.ms': 10000,
    'heartbeat.interval.ms': 3000,
    'max.poll.records': 500,
    'fetch.min.bytes': 1,
    'fetch.wait.max.ms': 500,
}

consumer = Consumer(conf)

# Example subscribe and poll loop
consumer.subscribe(['my_topic'])

try:
    while True:
        msg = consumer.poll(timeout=1.0)
        if msg is None:
            continue
        if msg.error():
            print(f"Consumer error: {msg.error()}")
            continue
        
        print(f"Received message: {msg.value().decode('utf-8')}")
        # Manually commit offset after processing
        consumer.commit(msg)
except KeyboardInterrupt:
    pass
finally:
    consumer.close()
